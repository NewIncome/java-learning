Spring Course : Mosh Hamedani
Course-Structure && Notes
-----------------

Part 1
1.1 - What is Spring Boot
  1.1.a - Build Tools
1.2 - Dependency Injection (DI)
1.3 - Database Integration with Spring Data JPA

1.1 Spring Framework
• Popular framework for building Java applications
• It is divided in Modules or Layers, you can use only what you need
• Modules / Layers
  ○ WEB
    ◘  Building web applications
  ○ DATA
    ◘  Working with DataBases
  ○ AOP
    ◘  AspectOrientedProgramming: like logging or security
  ○ CORE
    ◘  Handling DependencyInjection, managing Objects
  ○ TEST
    ◘  

-------------------
  1.1.a Build Tools
  • Maven && Gradle
  • Maven, install it separately
    ○  through maven.apache.org , or chocolatey.org(for windows)
    ○  or for linux:  sudo apt install maven

  Creating a new Project
  • Op1.  start.spring.io
    ○  group:  name of organization or page, with reverse domain name
       Artifact:  name of project == name
       package name:  combination of names
       package type:  jar
       Java version:  23
       dependencies:  ...
       "Generate"
    ○  unpack the zip file of the downloaded zip file
    ○  Install a Java Version Manager
      SDKMAN
      With this manager you can also install Maven, Gradle, and other SDK's
      $ curl -s "https://get.sdkman.io" | bash
      ◘  a to see the list of available Java versions
      $ sdk list java
      ◘  Install the desired version
      $ sdk install java 21.0.6-amzn
      ◘  to check installed versions, and currently used
      $ sdk list java | grep installed
      $ sdk current java
      ◘  to make any version as the default version
      $ sdk default java 21.0.6-amzn
      ◘  to use one Java version inside the terminal and not change the default
      $ sdk use java 8.0.402-amzn

      ◘  to remove previous versions before installation of SDKMAN
      $ sudo rm -rf /usr/lib/jvm/java-<version>

  • Op2.  CLI
  ...

  Project Structure
  • .mvn/     Maven wrapper to not require it to be globally installed on your machine
  • mvnw      shell-script for mac or linux
  • mvnw.cmd  shell-script for windows, both to automatically download the correct Maven version specified in the maven-wrapper
  • pom.xml   (Project Object Model) The heart of the Maven project
    ○  Here we have config about the project and it's dependencies, in xml format
  • src/      all the actual code for our project
    ○ /java/        for our java files
      ♦ /com.codewithmosh.store/StoreApplication.java
          this is the entrypoint to our application
      ♦ In my case ie.:
        /com/jalfredev/springstore01/Springstore01Application.java
    ○ /resources/   for our non-java files, like config, or static assets(html, css, js, etc)
      ♦ /application.properties   config, like db settings, server ports, etc

Dependency Management
Are 3rd party libraries that we use in out application
• For example:
  ○  tomcat ,  for embedded web-server
  ○  web ,  for handling web requests
  ○  webmvc ,  for building APIs
  ○  jackson ,  for processing JSON data
  ○  logging ,  for authentication
• Starter Dependency:  is a curated version of libraries and frameworks that are commonly used together,
  tested and verified by the spring dev team
  Used to instead of adding multiple individual libraries
  ○  spring-boot-starter-web ,  will bring in all the above dependencies mentioned
• Maven Central, is a public repo where we can find dependencies, similar to npm
   in  https://central.sonatype.com
  ○  To use it you just copy the 'snippet' to the pom.xml file
    inside/below the <dependencies> tag
* An interesting dependency for AutomaticReload, so the app compiles and reloads on every change we make, when running
  ○  spring-boot-devtools
  ○  with the tag:  <optional>true<optional>    //so it is not packaged for production


MAVEN CLI
• To update newly added dependencies (in your pom file)
  ○  It cleans the project, downloads new dependencies, compiles the code, runs tests, and packages the application into a JAR/WAR
    $ mvn clean install
  ○  compile your project and, as part of that, resolve and download any new dependencies
    $ mvn compile
  ○  directly
    $ mvn dependency:resolve
* If you don't have Maven installed, you can use the maven wrapper in the downloaded package from start.spring.io
  ○  to use it, being inside the project folder:
    $ ./mvnw -v
• To run a SpringBoot project
  $ mvn spring-boot:run
  ○  tomcat by default uses port 8080


Spring MVC (ModelViewController)
• Model (can be a simple Java class)
  ○  Data + Logic
• View (what the user sees)
  ○  can be static files, or dynamicly generated (ie.: with Timeleaf)
• Controller
  ○  Traffic controller, handles:
    ♦ Incoming requests from the User >
      > Interacts with the Model to get data
      > Then tell the View what to display

Controller
• to define one you need to use the Annotation @Controller
  ○  and Add the import to where the package lies, ie.: import org.springframework.stereotype.Controller;
* an Annotation is like a label or Tag in the code to give instructions or additional contect to the compiler
  + Can be applied to classes, methods, fields, parameters, and more
ie.:
• to add a new controller for the Home ("/") or root directory of our site
  ○1  Create the HomeController.java file
  ○2  Inside create the HomeController class
  ○2.1  Use the @Controller annotation to define a controller, before the class declaration
  ○3  Inside it, create the index method:  public String index() {}
  ○3.1  Use the @RequestMapping("url") annotation to define an HTTP request, before the method declaration
  ○3.2  Have it return the index.html

Configuring Project/Page Properties
• These are done inside the file src/main/resources/application.properties
• common properties to change:
  ○  server.port=8081  //port our application will listen on
  Or custom properties like:
  * Value-Annotation is needed to use these properties in our code
  ○  app.page-size=10

@Value annotation
• used for custom properties, from the application.properties file
•1 prepend in the previous line: @Value("${}")  and add the key to be looked for at run time
•2 add a private field (variable) to store the desire value in
  ○  ie.: @Value("${spring.application.name}")
          private String appName;

1.2 Dependency Injection
• Is ...
• Constructor injection
  Is using a constructor in a class to inject there a class of a dependency
  *  Is the recommended way to inject a dependency
• Setter injection
• Spring IoC container
• Configure Beans using annotations
• Controlling Bean Selection
• Externalizing configuration
• Configuring beans using code
• Lazy initialization
• Beans scopes
• Beans lifecycle methods

*//* In DependencyInjection using ConstructorInjection we are making use of
   * the OPEN-CLOSED-PRINCIPLE = "A class should be open for extension,
                                  but closed for modification"
   * because here we didn't have to modify our OrderService
   * we extended our application by creating new classes instead of
   modifying existing ones.
    // This is important because by avoiding changes to existing code we reduce
    the risk of introducing bugs and breaking other parts of the application
    - It's a 'tool', not a 'rule'

Constructor Injection of dependencies
• The recommended way to inject a dependency into a class is via a Constructor
  ○  Contructor injection requires a field for the parameter to be injected
  ○  And to use it we call the method from the object saved in the field

Setter Injection of dependencies
Another way to Inject a dependency into a class, is via a Setter
• .
• This approach is more used for Optional 'dependencies'
  ○* because it's used instead-of the ConstructorInjection
• By convention, we put getters & setters in the bottom of the class


--- Common VScode JAVA shortcuts ---
• Create an Interface
 > RClick on ClassName > Refactor > Extract-interface > 'choose methods to declare' > 'enter name of the Interface'
• Implement the Methods of the implemented/parent Interface
 > RClick on ClassName > Source-Action > Generate/implement Methods.. > 'Select Methods to implement'
• Create a Setter method
 > RClick on FieldName > Source-Action > Generate Setters
