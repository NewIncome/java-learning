Spring Course : Mosh Hamedani
Course-Structure && Notes
-----------------

Part 1
1.1 - What is Spring Boot
  1.1.a - Build Tools
1.2 - Dependency Injection (DI)
1.3 - Database Integration with Spring Data JPA

1.1 Spring Framework
• Popular framework for building Java applications
• It is divided in Modules or Layers, you can use only what you need
• Modules / Layers
  ○ WEB
    ◘  Building web applications
  ○ DATA
    ◘  Working with DataBases
  ○ AOP
    ◘  AspectOrientedProgramming: like logging or security
  ○ CORE
    ◘  Handling DependencyInjection, managing Objects
  ○ TEST
    ◘  

-------------------
  1.1.a Build Tools
  • Maven && Gradle
  • Maven, install it separately
    ○  through maven.apache.org , or chocolatey.org(for windows)
    ○  or for linux:  sudo apt install maven

  Creating a new Project
  • Op1.  start.spring.io
    ○  group:  name of organization or page, with reverse domain name
       Artifact:  name of project == name
       package name:  combination of names
       package type:  jar
       Java version:  23
       dependencies:  ...
       "Generate"
    ○  unpack the zip file of the downloaded zip file
    ○  Install a Java Version Manager
      SDKMAN
      With this manager you can also install Maven, Gradle, and other SDK's
      $ curl -s "https://get.sdkman.io" | bash
      ◘  a to see the list of available Java versions
      $ sdk list java
      ◘  Install the desired version
      $ sdk install java 21.0.6-amzn
      ◘  to check installed versions, and currently used
      $ sdk list java | grep installed
      $ sdk current java
      ◘  to make any version as the default version
      $ sdk default java 21.0.6-amzn
      ◘  to use one Java version inside the terminal and not change the default
      $ sdk use java 8.0.402-amzn

      ◘  to remove previous versions before installation of SDKMAN
      $ sudo rm -rf /usr/lib/jvm/java-<version>

  • Op2.  CLI
  ...

  Project Structure
  • .mvn/     Maven wrapper to not require it to be globally installed on your machine
  • mvnw      shell-script for mac or linux
  • mvnw.cmd  shell-script for windows, both to automatically download the correct Maven version specified in the maven-wrapper
  • pom.xml   (Project Object Model) The heart of the Maven project
    ○  Here we have config about the project and it's dependencies, in xml format
  • src/      all the actual code for our project
    ○ /java/        for our java files
      ♦ /com.codewithmosh.store/StoreApplication.java
          this is the entrypoint to our application
      ♦ In my case ie.:
        /com/jalfredev/springstore01/Springstore01Application.java
    ○ /resources/   for our non-java files, like config, or static assets(html, css, js, etc)
      ♦ /application.properties   config, like db settings, server ports, etc

1.2 Dependency Management
Are 3rd party libraries that we use in out application
• For example:
  ○ tomcat ,  for embedded web-server
  ○ web ,  for handling web requests
  ○ webmvc ,  for building APIs
  ○ jackson ,  for processing JSON data
  ○ logging ,  for authentication
• Starter Dependency:  is a curated version of libraries and frameworks that are commonly used together,
  tested and verified by the spring dev team
  Used to instead of adding multiple individual libraries
  ○  spring-boot-starter-web ,  will bring in all the above dependencies mentioned
• Maven Central, is a public repo where we can find dependencies, similar to npm
   in  https://central.sonatype.com
  ○ To use it you just copy the 'snippet' to the pom.xml file
    inside/below the <dependencies> tag

MAVEN CLI
• To update newly added dependencies (in your pom file)
  ○ It cleans the project, downloads new dependencies, compiles the code, runs tests, and packages the application into a JAR/WAR
    $ mvn clean install
  ○ compile your project and, as part of that, resolve and download any new dependencies
    $ mvn compile
  ○ directly
    $ mvn dependency:resolve

