NOTES | Udemy Course by John Baugh (Dr. J)

---- Java ---- local Course from codestars.com 
Declaration 
Initialization 
Assignment 

// In: 
final int SOME_NUM = 150; 
// the reserved word 'final' makes a variable Constant, it cannot change it's assigned value 

Data Types: 
Primitive: hold the value directly 
  byte (1 byte) 
  short (2 bytes) 
  int (4) 
  long (8) 
  float (4 bytes) 
  double (8) 
  char (1 character: 2 bytes) 
  boolean 
Reference: hold the memory address of the object of interest(a primitive type, etc) 
  String
//* Any number is by default a 'double' type.

- Conversion - 
float myFloat = 3.14f;
double myDouble = myFloat;
int x = (int) 20.9; // double(20.9) into -> int(4 bytes)
  String someValue = "450";
  int numericValue = Integer.parseInt(someValue);
  numericValue += 10; //now this can be done
double myPi = Double.parseDouble("3.14159");

-Comparison- == 'Type CASTING'
When used == with Reference types it compares the memory address

-Logical Operators-
&&  ||  !

-Control Statements-
+ Sequential (Sequence), these are executed in the order they are written
+ Selection (Decision), if, if-else, switch
+ Repetition (Loops), while, do-while, for
	'continue' and 'break'. Continue -> jumps to the next loop iteration. Break, breaks loop

-Data Structures-
Containers that hold data
+ Array: collection of homogeneous elements
	'They are fixed in size'
	ie.: int[] anArray = new int[5] //5 is the init size;   anArray[0] = 12;
  + ENHANCED FOR Loop, for Arrays:
  	ie.: for(int num : myArray) { System.out.println(num); }
+ ArrayList: arrays that can resize, and need to be imported from java util lib
	'They are a type of Entity called "Generic", which only holds reference types args, not primitives'
	ie.: ArrayList<String> namesList = new ArrayList<>(); /*<data type>*/
		 namesList.add("Kyle");
		 System.out.println(namesList.get(0));
+ Wrapper class type: there are 8, correspond to the 8 primitive types. Is a Reference Type
	'They are just capitalized versions of their primitive counterparts'
	Byte, Short, Integer, Long, Float, Double, Character, Boolean
	ie.: ArrayList<Integer> myAL = new ArrayList<>();
		 myAL.add(new Integer(10)); /*this is done by Java, auto boxing, so:*/ myAL.add(10)

+ String class: Strings are immutable. Reference type, composed of characters(primitives)
	+ some methods: charAt, length, equals(response bool),
	  compareTo: does a '>', responds with 0 for ==, pos int for >, and neg int for <
	  toUpperCase, toLowerCase
	  substring(int beginIndex, *endIndex),
	  indexOf(String str, *int startFrom): a -1 returned means not found
	  //* Overload: versions of arguments that can be used
	//* each char in java is an integer value representing Unicode encoding in Unicode
	/* in Java don't compare Strings with ==. Since they're reference type it'll compare
	 * their memory address instead of the value. For that we use the equals method
	
+ StringBuilder class: is the mutable counterpart to String, here Strings CAN be modified
	ie.: StringBuilder myVar = new StringBuilder("can be initialized");
		 myVar.append(" or not?");
		 myVar.insert(7, "new index defined word");
 		 myVar.replace(5, 8, "new words");
 		 myVar.delete(5, 9);

--- USER-DEFINED METHODS ---
* we always start our code using the 'main' method, invoked by the Java runtime as the entrypoint to our program

Method parts: header(with the Parameters if any), method body, and both are the m.definition

♣ Types of methods:
1. Void, Parameterized
2. Void, Parameterless
3. Value-returning, Parameterized
4. Value-returning, Parameterless

♣ Method Overloading
Is when you write many methods with the same name but different parameters, java recognizes the difference due to that method 'signature'
- The methods "Signature": is when you combine the name and the parameter list, including the Type, Order and number of parameters.

//* the 'return type' is not part of the method signature, but it typically matches so it's not ambiguous. But it can be different.


- The 'Call Stack' -
Holds activation records, keeps track of the method calls that have ocurred
You can only Push(add) or Pop(remove) an item from the top of the stack
When any method is called, an "Activation Record" also called "Stack Frame" is Pushed onto the top of the stack.
 + They hold information about the particular method call, like: memory location, param values, local variables, where in the method the last instruction was executed, etc.
 ie.: in a recursive countdown call method we Push to the stack the records for the calls like: main, 3, 2, 1, the poped from the stack 1,2,3,main


--- OOP ---
• Programming Paradigms
	+ Procedural: focuses on the procedures or Methods
	+ OOP: focuses on Objects, which has behaviours(procedures) and data
	    features and Primary PRINCIPLES:
		- (1)Encapsulation : The data(fields) and procedures(methods) live together in the Object
		- (2)Inhertance
		- (3)Polimorphism

• Encapsulation
	Refers to the Uniting of behaviours and data in a single entity, known as Object
  + Advantages:
	+ Portability
	+ Security : Promotes information / implementation Hiding

• A Class acts as a blueprint for objects
  + Instance Fields : the scentences defining specific data in a class, that objects'll have
  + Mutators(setter) : methods that set an internal value of the object
  + Accessors(getter) : methods that gets data from an object
  + Constructor(ctor) : they're called automatically when creating an object
		- they have the same name as their class
		- There are No-arg Constructor, and Parameterized ctor
*// Name Shadowing : is using this inside a setter method like so:
		ie.: this.numStories = numStories;
	  that refers to 2 different variables
  + Field : is a variable that belongs to a class or an object
    - There are 2 types: Instance fields, and Static Fields
    //- Also referred to as member 'Attributes'

- UML (Unified Modeling Language) -
• A Class Diagram : is used to help 'model' a class
• They have 3 sections: name, fields, and methods
  ♦ Format is as follows:
    ○ identifier : dataType
    ○ + means public, - means private
    ○ _ and 'underlined' field or method means it's "Static", thus it belongs to the class
ie.:  Name      Rectangle
      Fields  - length : double
              - _numRectangles : int_ //underlined
      Methods + Rectangle()   // no-arg ctor
              + Rectangle(length : double, width : double)  //param ctor
              + getLength() : double
              + setLength(length : double) : void
              + _getNumRectangles() : int_ //underlined






-(Steps to re-run edited Dockerfile>Image>Container)-
docker rm $(docker ps -a -q --filter ancestor=djava0) && docker rmi djava0
docker build -t djavab0 .
docker run djavab0
docker run -i djavab0  //if expecting STDIN data
